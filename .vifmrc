" Datei vifmrc
" Ort: $HOME/.config/vifm
" Config für VIFM (Angepasst von mir)
" Zweck: Einstellungen, Tastenbelegung, Commandos, etc.
" TIP: vifm installieren mit brew (mac)
"
" Stand 8. April 2024

" vim: filetype=vifm :
" Sample configuration file for vifm on OSX (last updated: 2 April, 2023)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------
" Main settings
" ------------------------------------------------------------------------------

" Command used to edit files in various contexts. The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
"
" Mind that due to `filetype * open` below by default the editor won't be used
" for opening files via l/Enter keys. Comment that line out to change the
" behaviour.
if executable('vim')
    set vicmd=vim
elseif executable('nvim')
    set vicmd=nvim
elseif executable('elvis')
    set vicmd=elvis\ -G\ termcap
elseif executable('vile')
    set vicmd=vile
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif
set vicmd=vim
""""""

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`. While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory. If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" What should be saved automatically on restarting vifm. Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" This is how many directories to store in the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
""""""set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt='%Y/%m/%d %H:%M'

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files). In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
set slowfs=curlftpfs

" Set custom status line look
""""""set statusline=" Hint: %z%= %A %10u:%-7g %15s %20d "
set statusline=" %= %A %10u:%-7g %15s %20d "

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme Default-256 Default

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]
""""""
""""""mark d ~/dev/
""""""mark h ~/

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
" %a for user arguments
" %c for current file under the cursor
" %C for current file under the cursor of inactive pane
" %f for selected file(s)
" %F for selected file(s) of inactive pane
" %b is the same as %f %F
" %d for current directory name
" %D for current directory name of inactive pane
" %r{x} for list of files in register {x}
" %m runs the command in a menu window
" %u uses command's output to build a file list
" see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

""command! df df -h %m 2> /dev/null
""command! diff vim -d %f %F
""command! zip zip -r %c.zip %f
""command! run !! ./%f
""command! make !!make %a
""command! mkcd :mkdir %a | cd %a
""command! reload :write | restart full

" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored. To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of the following formats:
"
" :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
"
" %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
"
" Example:
" :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program. There is also %FOREGROUND, which is useful for entering passwords.

" Pdf
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

fileviewer {*.xhtml,*.html,*.htm},<text/html> w3m -dump -T text/html

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b


" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ shasum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ shasum -a 256 -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ shasum -a 512 -c %f %S,


" Extract zip files
filetype {*.zip},<application/zip,application/java-archive>
       \ mkdir %f:r && tar -vxf %f --directory %f:r
fileviewer {*.zip,*.jar,*.war,*.ear},
          \<application/zip,application/java-archive>
          \ tar -tf %f

" Extract tar archives
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
         \*.tzst},
        \<application/x-tar>
       \ tar -vxf %f
fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
           \*.tzst},
          \<application/x-tar>
         \ tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Extract rar files
filetype *.rar unrar x -y -c- -ad %f %s
fileviewer *.rar unrar lb %c


" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" """"""Or leave it for automatic detection
"fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings). Use of the line below results in ignoring 'vi[x]cmd' option for
" unknown file types on l/Enter keys.

""""""filetype * open

" ------------------------------------------------------------------------------
" Panel configuration examples
" ------------------------------------------------------------------------------

" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

"""""" Show vertical border
""""""set fillchars=vborder:│

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------
" Sample keyboard mappings
" ------------------------------------------------------------------------------

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

"""""" Open file in new MacVim tab
"""""" nnoremap o :!nvim --remote-tab-silent %f<cr>
"""""" Open file in new MacVim window
"""""" nnoremap O :!nvim %f<cr>

" Open file in the background using its default program
""""""nnoremap gb :!open -g %f<cr>

" Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>

" Yank current file path into the clipboard (escape spaces)
nnoremap yf :!printf %f:p:gs? ?\\ ? | pbcopy<cr>

" View preview in Quick Look
""""""nnoremap <space> :!qlmanage -p %f > /dev/null 2>&1<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" As above, but without the file extension
" nnoremap I cW<c-a>
" nnoremap cc cW<c-u>
" nnoremap A cW

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,, :write | edit $MYVIFMRC | restart full<cr>

" Open MacVim to edit vifmrc
""""""nnoremap ,C :!mvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!bat %f<cr> """"""
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
" Swap panes
nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
" vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Activate screen/tmux support
" screen!

" ------------------------------------------------------------------------------
" Icon decorations example
" ------------------------------------------------------------------------------

" https://github.com/cirala/vifm_devicons


"""""" HIER kommt Harald

command new :!vim %a
"mit !! (cli) statt ! (GUI) wird eine PAUSE eingeblendet"

only

"" Funktioniert das? - nein
"" fileviewer * </opt/homebrew/bin/bat> bat %c
nnoremap <silent> w : if &quickview && !layoutis('only')
                   \| view
                   \| else
                   \| if layoutis('only')
                   \| if &lines + 50 < &columns | vsplit | else | split | endif
                   \| endif
                   \| view!
                   \| execute 'qnoremap w q:view|only|qunmap w<lt>cr>'
                   \| execute 'wincmd w'
                   \| endif
                   \| <cr>

nnoremap qq ZZ
nnoremap Zz ZZ
nnoremap Zq ZQ

nnoremap E :edit<cr>

mark d ~/dev/doc/
mark 0 ~/

colorscheme molokai ""papercolor-light ""default ""molokai
set runexec
"set mouse=a geht nicht

" julia
filetype {*.jl},<.>,
       \ {RUN Julia}
       \ clear && julia -q %f && echo 'Press ENTER to continue ...'; read -r dummy,
       \ {RUN Julia interactiv}
       \ clear && julia -iq %f,
       \ {EDIT and RUN Julia interactiv}
       \ clear && vim %f && julia -iq %f,
       \ {START Julia (REPL only)}
       \ clear && julia -iq %f

" ipython
filetype {*.py},<.>,
       \ {RUN IPython (via PyPy3)}
       \ clear && pypy3 -m IPython %f && echo 'Press ENTER to continue ...'; read -r dummy,
       \ {RUN IPython (PyPy3) interactiv}
       \ clear && pypy3 -m IPython -i %f,
       \ {START IPython (PyPy3) REPL only}
       \ clear && pypy3 -m IPython #


filetype {*.pyexe},<.>,
       \ {RUN IPython ohne Stop (via PyPy3)}
       \ clear && pypy3 -m IPython %f #&& echo 'Test (continue...)'; read -r dummy,

filetype {*.jlexe},<.>,
       \ {RUN Julia ohne Stop}
       \ clear && julia -q %f #&& echo 'no key to continue...'; read -r dummy,


set dotdirs=rootparent
nnoremap o :file<cr>
nnoremap # '
nnoremap ## ''
""nnoremap c-L :redraw<cr>
nnoremap xh :cd ~<cr>
nnoremap Hh :cd $WDIR<cr>
nnoremap HH :cd ~<cr>
nnoremap xg :cd ~/dev/github<cr>
nnoremap Hg :cd ~/dev/github<cr>
nnoremap HG :cd ~/dev/github<cr>
nnoremap Hd :his d<cr>
nnoremap HD :his d<cr>
nnoremap Hl :his c<cr>
nnoremap HL :his c<cr>
nnoremap Hc :com<cr>
nnoremap HC :com<cr>
nnoremap ,ww :cd ~/dev/vimwiki/ | edit index.md<cr>
nnoremap ,ss :saveconf<cr>


""source /Users/user/.config/vifm/favicons.vifm 

" Show dotfiles/dotdirs in the first place SCHADE
""set dotfiles
""set sortgroups='(|\.).*'
""set sort=+groups,+dir,+name

let $VIFM_SERVER_NAME = v:servername
"und in .zshrc ...."

let $INSIDE_VIFM = 'true'

filetype *.zip,*.jar,*.war,*.ear
\ {View contents}
\ zip -sf %c | less,
\ {Extract here}
\ tar -xf %c,

fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c, echo "No zip to preview:"

screen!

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]
""""""
""""""mark d ~/dev/
""""""mark h ~/

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
" %a for user arguments
" %c for current file under the cursor
" %C for current file under the cursor of inactive pane
" %f for selected file(s)
" %F for selected file(s) of inactive pane
" %b is the same as %f %F
" %d for current directory name
" %D for current directory name of inactive pane
" %r{x} for list of files in register {x}
" %m runs the command in a menu window
" %u uses command's output to build a file list
" see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
""command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart full
"hier könnte zuvor noch ein internes com ausgeführt werden, das die configs updatet"
"
command! saveconf :!!saveconfhelp.sh && rsync -auc /Users/user/Documents/devcloud /Volumes/LivedriveFS/devsave | echo "Bitte warten ..."

command! md jupytext --to md %f
command! py jupytext --to py %f
command! jl jupytext --to jl %f

command! update !!clear && git add * && git commit -am "Auto" && git push
command! load !!clear && git pull

colorscheme Default-256 "dwmlight
colorscheme Default

filetype *.md mdless --no-color -t mdless-theme %c
""glow -p -s light %c

"geht nicht"fileviewer {*.md} glow -p %c,echo "mist"

filetype {*.md},<.>,
       \ {MD mit FrogMouth}
       \ frogmouth %c, 
       \ {MD mit Glow }
       \ glow -p -s light %c,
       \ {MD mit mdv }
       \ mdv -A %c |less,
       \ {MD mit vim read only }
       \ vim -M %c 

"Kommt noch"


