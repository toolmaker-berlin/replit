" Datei vifmrc (Version REPLIT)
" Ort: $WDIR/.vifmrc
" Config für VIFM (Angepasst fuer REPLIT ggf. auch iMac)
" Zweck: Einstellungen, Tastenbelegung, Commandos, etc.
"
" Stand 10. April 2024


" ------------------------------------------------------------------------------
" Main settings
" ------------------------------------------------------------------------------

set vicmd=vim
set syscalls
set trash


" What should be saved automatically on restarting vifm. Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.

set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks

set history=100
set nofollowlinks
set sortnumbers
set undolevels=100
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this, or norunexec

set runexec

"""""" set timefmt='%Y/%m/%d %H:%M'
set timefmt='%d/%m/%Y %H:%M'

set wildmenu
set wildstyle=popup
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
set ignorecase
set smartcase
set nohlsearch
set incsearch
set scrolloff=4
set slowfs=curlftpfs
set nowrap

" Set custom status line look
"""""" set statusline=" Hint: %z%= %A %10u:%-7g %15s %20d "
set statusline=" %= %A %10u:%-7g %15s %20d "

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme dvmlight Default Default-256 molokai papercolor-light

" ohne SET -> macht ONE-PANE-Mode (:on geht auch)
only

" Show dotfiles/dotdirs in the first place SCHADE geht nicht
"""""" set dotfiles
"""""" set sortgroups='(|\.).*'
"""""" set sort=+groups,+dir,+name

set dotdirs=rootparent

let $INSIDE_VIFM = 'true'


" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark h ~/
mark h $WDIR/
mark H ~/


" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
" %a for user arguments
" %c for current file under the cursor
" %C for current file under the cursor of inactive pane
" %f for selected file(s)
" %F for selected file(s) of inactive pane
" %b is the same as %f %F
" %d for current directory name
" %D for current directory name of inactive pane
" %r{x} for list of files in register {x}
" %m runs the command in a menu window
" %u uses command's output to build a file list
" see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

" command! df df -h %m 2> /dev/null
" command! diff vim -d %f %F
" command! zip zip -r %c.zip %f
" command! run !! ./%f
" command! make !!make %a
" command! mkcd :mkdir %a | cd %a
" command! reload :write | restart full

" mit !! (cli) statt ! (GUI) wird eine PAUSE eingeblendet"

command new :!vim %a

" configs updaten ...
"
" command! saveconf :!!saveconfhelp.sh && rsync -auc /Users/user/Documents/devcloud /Volumes/LivedriveFS/devsave | echo "Bitte warten ..."

" command! md jupytext --to md %f
" command! py jupytext --to py %f
" command! jl jupytext --to jl %f

" command! update !!clear && git add * && git commit -am "Auto" && git push
" command! load !!clear && git pull


" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored. To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app


" Extract zip files
filetype {*.zip},<application/zip,application/java-archive>
       \ mkdir %f:r && tar -vxf %f --directory %f:r
fileviewer {*.zip,*.jar,*.war,*.ear},
          \<application/zip,application/java-archive>
          \ tar -tf %f

" Extract tar archives
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
         \*.tzst},
        \<application/x-tar>
       \ tar -vxf %f
fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
           \*.tzst},
          \<application/x-tar>
         \ tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Extract rar files
filetype *.rar unrar x -y -c- -ad %f %s
fileviewer *.rar unrar lb %c

filetype *.zip,*.jar,*.war,*.ear
\ {View contents}
\ zip -sf %c | less,
\ {Extract here}
\ tar -xf %c,

fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c, echo "No zip to preview:"


" julia
filetype {*.jl},<.>,
       \ {RUN Julia}
       \ clear && julia -q %f && echo 'Press ENTER to continue ...'; read -r dummy,
       \ {RUN Julia interactiv}
       \ clear && julia -iq %f,
       \ {EDIT and RUN Julia interactiv}
       \ clear && vim %f && julia -iq %f,
       \ {START Julia (REPL only)}
       \ clear && julia -iq %f

" ipython/python
filetype {*.py},<.>,
       \ {RUN Python (via Python buildin)}
       \ clear && python %f && echo 'Press ENTER to continue ...'; read -r dummy

"        \ {RUN IPython (via PyPy3)}
"        \ clear && pypy3 -m IPython %f && echo 'Press ENTER to continue ...'; read -r dummy,
"        \ {RUN IPython (PyPy3) interactiv}
"        \ clear && pypy3 -m IPython -i %f,
"        \ {START IPython (PyPy3) REPL only}
"        \ clear && pypy3 -m IPython #

" filetype {*.pyexe},<.>,
"        \ {RUN IPython ohne Stop (via PyPy3)}
"        \ clear && pypy3 -m IPython %f # && echo 'Test (continue...)'; read -r dummy,

filetype {*.jlexe},<.>,
       \ {RUN Julia ohne Stop}
       \ clear && julia -q %f # && echo 'no key to continue...'; read -r dummy,

filetype {*.md},<.>,
       \ {MD mit vim read only }
       \ vim -M %c, 
       \ {MD mit Glow }
       \ glow -p -s light %c


" ------------------------------------------------------------------------------
" Panel configuration examples
" ------------------------------------------------------------------------------

" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

" Show vertical border
" set fillchars=vborder:│

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}


" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
" nnoremap <left> <nop>

" Activate screen/tmux support
" screen!


" ------------------------------------------------------------------------------
" Icon decorations example
" ------------------------------------------------------------------------------

" https://github.com/cirala/vifm_devicons
" source /Users/user/.config/vifm/favicons.vifm 


" ------------------------------------------------------------------------------
" Sample keyboard mappings
" ------------------------------------------------------------------------------

" Start shell in current directory
" nnoremap s :shell <cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Yank current directory path into the clipboard
"""""" nnoremap yd :!printf %d | pbcopy<cr>
" Yank current file path into the clipboard (escape spaces)
"""""" nnoremap yf :!printf %f:p:gs? ?\\ ? | pbcopy<cr>

" Mappings for faster renaming (cw)
" without the file extension
nnoremap I cW<c-a>
nnoremap cc cW<c-u>
nnoremap A cW

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,, :write | edit $MYVIFMRC | restart full<cr> """"""

" Toggle wrap setting on ,w key in PREVIEW
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings (!!=Pause)
nnoremap <f3> :!!bat %f<cr> """"""
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

nnoremap <silent> w : if &quickview && !layoutis('only')
                   \| view
                   \| else
                   \| if layoutis('only')
                   \| if &lines + 50 < &columns | vsplit | else | split | endif
                   \| endif
                   \| view!
                   \| execute 'qnoremap w q:view|only|qunmap w<lt>cr>'
                   \| execute 'wincmd w'
                   \| endif
                   \| <cr>


nnoremap qq ZZ
nnoremap Zz ZZ
nnoremap Zq ZQ "Quitt ohne save!

nnoremap E :edit<cr>

nnoremap o :file<cr>
nnoremap # '
nnoremap ## ''
nnoremap Hh :cd $WDIR<cr>
nnoremap HH :cd $WDIR<cr>
nnoremap Hd :his d<cr>
nnoremap HD :his d<cr>
nnoremap Hl :his c<cr>
nnoremap HL :his c<cr>
nnoremap Hc :com<cr>
nnoremap HC :com<cr>

" nnoremap ,ss :saveconf<cr>



